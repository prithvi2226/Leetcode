


^ 


0 0000
1 0001
2 0010
3 0011
4 0100
5 0101
6 0110
7 0111
8 1000





integer n will be given, lets say integer n is 4,
array[n+1] = array[5]
0 -> 0
1 -> 1
2 -> 1
3 -> 2
4 -> 1
5 -> 2

array would look something like this - [0, 1, 1, 2, 1, 2]


Explanation:

offset = 1;

0 0000 0
1 0001 1 + (n - offset) = 1 + (1 - 1)= 1

if(offset * 2 = n + 1){
  //yes
  offset = n + 1;
}
//because the pattern changes on the power of 2.
//1, 2, 4, 8, 16, 32
//all the numbers above in the  binary form
//start with 1 and continue with only 0.
//2- 10, 4- 100, 8- 1000 etc.
//i.e. all the numbers above only have single 1 in them.

offset = 2

2 0010 1 + (n - offset) = 1 + (2 - 2) = 1 '1' is present in the binary representation
if(offset * 2 == n + 1){
  //NO
}
offset = 2

3 0011 1 + (n - offset) = 1 + (3 - 2) = 2 1's are present in the binary rep of 3.
if(offset * 2 == n + 1){
  //yes
  offset = n + 1;
}

4 0100
5 0101
6 0110
7 0111
8 1000


initialize n with 1;

but the array will start with 0 -> Sol_arr[0] = 0;
offset = 1;





loop till n+1 (basically till n):











  







